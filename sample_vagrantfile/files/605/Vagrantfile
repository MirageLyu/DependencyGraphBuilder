# -*- mode: ruby -*-
# vim: set ft=ruby ts=2 et :

# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
VAGRANTFILE_API_VERSION = "2"

# Require a recent version of vagrant otherwise some have reported errors 
# setting host names on boxes
Vagrant.require_version ">= 1.7.2"

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|

  vagrant_cluster_config = {
    "box_name"  => ENV['BOX_NAME'] || "centos/7",
    "num_nodes" => ENV['NUM_HOSTS'] || 2,
    "mn_memory"  => ENV['MN_MEMORY'] || 512,
    "master_memory"  => ENV['MASTER_MEMORY'] || 512,
    "node_memory"  => ENV['NODE_MEMORY'] || 512
  }

  config.vm.box = vagrant_cluster_config["box_name"]

  # Disabling the default /vagrant share
  config.vm.synced_folder ".", "/vagrant", disabled: true

  # 1: Management Node
  # 2: Master Node
  # 3, 4, 5, 6: Worker Nodes (included Infra nodes)
  
  N = (vagrant_cluster_config['num_nodes']).to_i

  (1..N).each do |i|
    if i == 2 
      # openshift master node
      vm_name = "master"
      vm_memory = vagrant_cluster_config['master_memory']
    elsif i > 2 && i <= 6
      # openshift workers nodes and infra nodes
      vm_name = "node#{i-2}"
      vm_memory = vagrant_cluster_config['node_memory']
    else
      # management node
      vm_name = "mn"
      vm_memory = vagrant_cluster_config['mn_memory']
    end

    config.vm.define "#{vm_name}" do |node|
      node.vm.hostname = "#{vm_name}"
      #node.vm.network :private_network, ip: "10.10.10.10#{i}", auto_config: false 
      node.vm.provider :libvirt do |domain|
        domain.uri = 'qemu+unix:///system'
        domain.driver = 'kvm'
        domain.memory = "#{vm_memory}".to_i
        domain.cpus = 1
        if "#{vm_name}" == "node2" || 
           "#{vm_name}" == "node3" || 
           "#{vm_name}" == "node4"
            # disk for Docker backend storage
            domain.storage :file, :size => '10G'
            # disks for JBOD
            domain.storage :file, :size => '10G'
            domain.storage :file, :size => '10G'
        elsif "#{vm_name}" == "node1"
            # disk for Docker backend storage in infra node
            domain.storage :file, :size => '10G'
        end
      end
      # Ansible groups only works in Vagrant +1.8.0
      node.vm.provision :ansible do |ansible|
        ansible.playbook = "provisioning/site.yml"
        ansible.groups = {
          "mn-group" => ["mn"],
          "master-group" => ["master"],
          "infra-group" => ["node1"],
          "worker-group" => ["node2", "node3", "node4"],
          "all_groups:children" => ["mn-group", 
                                    "master-group", 
                                    "infra-group", 
                                    "worker-group"]
        }
      end
    end
  end 
end
